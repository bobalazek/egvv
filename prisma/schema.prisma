generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Series {
  id      Int      @id @default(autoincrement())
  key     String // formula-1, formula-2, formula-3, formula-e
  name    String
  url     String
  seasons Season[] @relation(name: "Season_Series")
}

model Season {
  id       Int    @id @default(autoincrement())
  name     String // ex.: Formula 1 2022 World Championsip
  seriesId Int
  series   Series @relation(name: "Season_Series", fields: [seriesId], references: [id])
}

model Circuit {
  id          Int     @id @default(autoincrement())
  name        String
  location    String
  countryCode String
  url         String
  events      Event[] @relation(name: "Event_Circuit")
}

model Event {
  id            Int            @id @default(autoincrement())
  name          String
  round         Int // Which round in the season?
  laps          Int
  lapDistance   Float // in KM
  url           String?
  circuitId     Int
  circuit       Circuit        @relation(name: "Event_Circuit", fields: [circuitId], references: [id])
  eventSessions EventSession[] @relation(name: "EventSession_Event")
}

model EventSession {
  id                      Int                      @id @default(autoincrement())
  name                    String
  type                    String // free_practice, qualification, sprint_race, race, ...
  eventId                 Int
  event                   Event                    @relation(name: "EventSession_Event", fields: [eventId], references: [id])
  eventSessionTeamDrivers EventSessionTeamDriver[] @relation(name: "EventSessionTeamDriver_EventSession")
}

model EventSessionTeamDriver {
  id                                    Int                                    @id @default(autoincrement())
  number                                Int
  code                                  String
  eventSessionId                        Int
  eventSession                          EventSession                           @relation(name: "EventSessionTeamDriver_EventSession", fields: [eventSessionId], references: [id])
  seasonTeamDriverId                    Int
  seasonTeamDriver                      SeasonTeamDriver                       @relation(name: "EventSessionTeamDriver_SeasonTeamDriver", fields: [seasonTeamDriverId], references: [id])
  vehicleId                             Int?                                   @unique
  vehicle                               Vehicle?                               @relation(name: "EventSessionTeamDriver_Vehicle", fields: [vehicleId], references: [id])
  eventSessionTeamDriverLaps            EventSessionTeamDriverLap[]            @relation(name: "EventSessionTeamDriverLap_EventSessionTeamDriver")
  eventSessionTeamDriverStartingGrids   EventSessionTeamDriverStartingGrid[]   @relation(name: "EventSessionTeamDriverStartingGrid_EventSessionTeamDriver")
  eventSessionTeamDriverClassifications EventSessionTeamDriverClassification[] @relation(name: "EventSessionTeamDriverClassification_EventSessionTeamDriver")
}

model EventSessionTeamDriverLap {
  id                       Int                    @id @default(autoincrement())
  time                     DateTime?
  position                 Int?
  eventSessionTeamDriverId Int
  eventSessionTeamDriver   EventSessionTeamDriver @relation(name: "EventSessionTeamDriverLap_EventSessionTeamDriver", fields: [eventSessionTeamDriverId], references: [id])
}

model EventSessionTeamDriverStartingGrid {
  id                       Int                    @id @default(autoincrement())
  position                 Int?
  time                     DateTime?
  note                     String? // if the racer for example starts in the pit or has a penalty
  eventSessionTeamDriverId Int
  eventSessionTeamDriver   EventSessionTeamDriver @relation(name: "EventSessionTeamDriverStartingGrid_EventSessionTeamDriver", fields: [eventSessionTeamDriverId], references: [id])
}

model EventSessionTeamDriverClassification {
  id                       Int                    @id @default(autoincrement())
  status                   String // finished, dnf, dns, ...
  position                 Int?
  time                     DateTime?
  points                   Float? // Yes, as we've seen last season, there can be half points
  note                     String?
  eventSessionTeamDriverId Int
  eventSessionTeamDriver   EventSessionTeamDriver @relation(name: "EventSessionTeamDriverClassification_EventSessionTeamDriver", fields: [eventSessionTeamDriverId], references: [id])
}

model Driver {
  id                     Int    @id @default(autoincrement())
  firstName              String
  lastName               String
  nationalityCountryCode String
  url                    String
}

model Team {
  id                Int       @id @default(autoincrement())
  name              String // Short name of the team like "Mercedes", "Ferarri", "Redbull"
  baseCountryCode   String
  url               String
  debutAt           DateTime
  defunctAt         DateTime?
  predecessorTeamId Int?      @unique
  predecessorTeam   Team?     @relation("Team_PredecessorTeam", fields: [predecessorTeamId], references: [id])
  successorTeam     Team?     @relation("Team_PredecessorTeam")
}

model SeasonTeam {
  id                Int                @id @default(autoincrement())
  seasonId          Int
  teamId            Int
  name              String // Full name of the team, like "	Mercedes-AMG Petronas F1 Team", "Scuderia Ferarri", ...
  powerUnit         String
  isDefunct         Boolean
  vehicleId         Int                @unique
  vehicle           Vehicle            @relation(name: "SeasonTeam_Vehicle", fields: [vehicleId], references: [id])
  seasonTeamDrivers SeasonTeamDriver[] @relation(name: "SeasonTeamDriver_SeasonTeam")
}

model SeasonTeamDriver {
  id                      Int                      @id @default(autoincrement())
  number                  Int
  code                    String
  isTemporary             Boolean
  seasonTeamId            Int
  seasonTeam              SeasonTeam               @relation(name: "SeasonTeamDriver_SeasonTeam", fields: [seasonTeamId], references: [id])
  eventSessionTeamDrivers EventSessionTeamDriver[] @relation(name: "EventSessionTeamDriver_SeasonTeamDriver")
}

model Vehicle {
  id                     Int                     @id @default(autoincrement())
  name                   String
  powerUnit              String
  seasonTeam             SeasonTeam?             @relation(name: "SeasonTeam_Vehicle")
  eventSessionTeamDriver EventSessionTeamDriver? @relation(name: "EventSessionTeamDriver_Vehicle")
}
