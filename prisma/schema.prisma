generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Series {
  id      Int      @id @default(autoincrement())
  name    String
  seasons Season[] @relation(name: "Season_Series")
}

model Season {
  id       Int    @id @default(autoincrement())
  name     String // ex.: Formula 1 2022 World Championsip
  seriesId Int
  series   Series @relation(name: "Season_Series", fields: [seriesId], references: [id])
}

model Circuit {
  id     Int     @id @default(autoincrement())
  name   String
  events Event[] @relation(name: "Event_Circuit")
}

model Event {
  id            Int            @id @default(autoincrement())
  name          String
  round         Int // Which round in the season?
  laps          Int
  lapDistance   Float // in KM
  url           String?
  circuitId     Int
  circuit       Circuit        @relation(name: "Event_Circuit", fields: [circuitId], references: [id])
  eventSessions EventSession[] @relation(name: "EventSession_Event")
}

model EventSession {
  id                  Int                  @id @default(autoincrement())
  name                String
  type                String // free_practice, qualification, sprint_race, race, ...
  eventId             Int
  event               Event                @relation(name: "EventSession_Event", fields: [eventId], references: [id])
  eventSessionDrivers EventSessionDriver[] @relation(name: "EventSessionDriver_EventSession")
}

model EventSessionDriver {
  id                                Int                                @id @default(autoincrement())
  number                            Int
  code                              String
  eventSessionId                    Int
  eventSession                      EventSession                       @relation(name: "EventSessionDriver_EventSession", fields: [eventSessionId], references: [id])
  driverId                          Int
  driver                            Driver                             @relation(name: "EventSessionDriver_Driver", fields: [driverId], references: [id])
  eventSessionDriverLaps            EventSessionDriverLap[]            @relation(name: "EventSessionDriverLap_EventSessionDriver")
  eventSessionDriverStartingGrids   EventSessionDriverStartingGrid[]   @relation(name: "EventSessionDriverStartingGrid_EventSessionDriver")
  eventSessionDriverClassifications EventSessionDriverClassification[] @relation(name: "EventSessionDriverClassification_EventSessionDriver")
}

model EventSessionDriverLap {
  id                   Int                @id @default(autoincrement())
  time                 DateTime?
  position             Int?
  eventSessionDriverId Int
  eventSessionDriver   EventSessionDriver @relation(name: "EventSessionDriverLap_EventSessionDriver", fields: [eventSessionDriverId], references: [id])
}

model EventSessionDriverStartingGrid {
  id                   Int                @id @default(autoincrement())
  time                 DateTime?
  position             Int?
  note                 String? // if the racer for example starts in the pit or has a penalty
  eventSessionDriverId Int
  eventSessionDriver   EventSessionDriver @relation(name: "EventSessionDriverStartingGrid_EventSessionDriver", fields: [eventSessionDriverId], references: [id])
}

model EventSessionDriverClassification {
  id                   Int                @id @default(autoincrement())
  status               String // finished, dnf, dns, ...
  position             Int?
  note                 String?
  eventSessionDriverId Int
  eventSessionDriver   EventSessionDriver @relation(name: "EventSessionDriverClassification_EventSessionDriver", fields: [eventSessionDriverId], references: [id])
}

model Driver {
  id                  Int                  @id @default(autoincrement())
  firstName           String
  lastName            String
  eventSessionDrivers EventSessionDriver[] @relation(name: "EventSessionDriver_Driver")
}

model Team {
  id                Int      @id @default(autoincrement())
  name              String
  predecessorTeamId Int?
  debutAt           DateTime
  defunctAt         DateTime
}

model SeasonTeam {
  id                Int                @id @default(autoincrement())
  seasonId          Int
  teamId            Int
  name              String // Full name of the team, including the title sponsor name
  isDefunct         Boolean
  seasonTeamDrivers SeasonTeamDriver[] @relation(name: "SeasonTeamDriver_SeasonTeam")
}

model SeasonTeamDriver {
  id           Int        @id @default(autoincrement())
  number       Int
  code         String
  isTemporary  Boolean
  seasonTeamId Int
  seasonTeam   SeasonTeam @relation(name: "SeasonTeamDriver_SeasonTeam", fields: [seasonTeamId], references: [id])
}
