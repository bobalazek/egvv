generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Series {
  id      Int      @id @default(autoincrement())
  name    String
  seasons Season[] @relation(name: "Season_Series")
}

model Season {
  id       Int    @id @default(autoincrement())
  name     String // ex.: Formula 1 2022 World Championsip
  seriesId Int
  series   Series @relation(name: "Season_Series", fields: [seriesId], references: [id])
}

model Circuit {
  id     Int     @id @default(autoincrement())
  name   String
  events Event[] @relation(name: "Event_Circuit")
}

model Event {
  id            Int            @id @default(autoincrement())
  name          String
  round         Int // Which round in the season?
  laps          Int
  lapDistance   Float // in KM
  url           String?
  circuitId     Int
  circuit       Circuit        @relation(name: "Event_Circuit", fields: [circuitId], references: [id])
  eventSessions EventSession[] @relation(name: "EventSession_Event")
}

model EventSession {
  id                          Int                          @id @default(autoincrement())
  name                        String
  type                        String // free_practice, qualification, sprint_race, race, ...
  eventId                     Int
  event                       Event                        @relation(name: "EventSession_Event", fields: [eventId], references: [id])
  eventSessionLaps            EventSessionLap[]            @relation(name: "EventSessionLap_EventSession")
  eventSessionStartingGrids   EventSessionStartingGrid[]   @relation(name: "EventSessionStartingGrid_EventSession")
  eventSessionClassifications EventSessionClassification[] @relation(name: "EventSessionClassification_EventSession")
}

model EventSessionLap {
  id                 Int              @id @default(autoincrement())
  time               DateTime?
  position           Int?
  eventSessionId     Int
  eventSession       EventSession     @relation(name: "EventSessionLap_EventSession", fields: [eventSessionId], references: [id])
  seasonTeamDriverId Int
  seasonTeamDriver   SeasonTeamDriver @relation(name: "EventSessionLap_SeasonTeamDriver", fields: [seasonTeamDriverId], references: [id])
}

model EventSessionStartingGrid {
  id                 Int              @id @default(autoincrement())
  time               DateTime?
  position           Int?
  note               String? // if the racer for example starts in the pit or has a penalty
  eventSessionId     Int
  eventSession       EventSession     @relation(name: "EventSessionStartingGrid_EventSession", fields: [eventSessionId], references: [id])
  seasonTeamDriverId Int
  seasonTeamDriver   SeasonTeamDriver @relation(name: "EventSessionStartingGrid_SeasonTeamDriver", fields: [seasonTeamDriverId], references: [id])
}

model EventSessionClassification {
  id                 Int              @id @default(autoincrement())
  status             String // finished, dnf, dns, ...
  position           Int?
  eventSessionId     Int
  eventSession       EventSession     @relation(name: "EventSessionClassification_EventSession", fields: [eventSessionId], references: [id])
  seasonTeamDriverId Int
  seasonTeamDriver   SeasonTeamDriver @relation(name: "EventSessionClassification_SeasonTeamDriver", fields: [seasonTeamDriverId], references: [id])
}

model Driver {
  id        Int    @id @default(autoincrement())
  firstName String
  lastName  String
}

model Team {
  id                Int      @id @default(autoincrement())
  name              String
  predecessorTeamId Int?
  debutAt           DateTime
  defunctAt         DateTime
}

model SeasonTeam {
  id                Int                @id @default(autoincrement())
  seasonId          Int
  teamId            Int
  name              String // Full name of the team, including the title sponsor name
  isDefunct         Boolean
  seasonTeamDrivers SeasonTeamDriver[] @relation(name: "SeasonTeamDriver_SeasonTeam")
}

model SeasonTeamDriver {
  id                          Int                          @id @default(autoincrement())
  number                      Int
  code                        String
  isTemporary                 Boolean
  seasonTeamId                Int
  seasonTeam                  SeasonTeam                   @relation(name: "SeasonTeamDriver_SeasonTeam", fields: [seasonTeamId], references: [id])
  eventSessionLaps            EventSessionLap[]            @relation(name: "EventSessionLap_SeasonTeamDriver")
  eventSessionStartingGrids   EventSessionStartingGrid[]   @relation(name: "EventSessionStartingGrid_SeasonTeamDriver")
  eventSessionClassifications EventSessionClassification[] @relation(name: "EventSessionClassification_SeasonTeamDriver")
}
