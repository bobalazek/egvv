generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Series {
  id      Int      @id @default(autoincrement())
  slug    String   @unique // formula-1, formula-2, formula-3, formula-e
  name    String
  url     String
  seasons Season[] @relation(name: "Season_Series")
}

model Season {
  id          Int          @id @default(autoincrement())
  slug        String       @unique
  name        String // ex.: Formula 1 2022 World Championship
  year        Int
  startAt     DateTime
  endAt       DateTime?
  seriesId    Int
  series      Series       @relation(name: "Season_Series", fields: [seriesId], references: [id])
  seasonTeams SeasonTeam[] @relation(name: "SeasonTeam_Season")
  events      Event[]      @relation(name: "Event_Season")
}

model Circuit {
  id                Int     @id @default(autoincrement())
  slug              String  @unique
  name              String
  location          String
  locationLatitude  Float?
  locationLongitude Float?
  countryCode       String
  url               String
  events            Event[] @relation(name: "Event_Circuit")
}

model Driver {
  id                Int                @id @default(autoincrement())
  slug              String             @unique
  firstName         String
  lastName          String
  countryCode       String
  url               String
  seasonTeamDrivers SeasonTeamDriver[] @relation(name: "SeasonTeamDriver_Driver")
}

model Team {
  id                Int          @id @default(autoincrement())
  slug              String       @unique
  name              String // Short name of the team like "Mercedes", "Ferrari", "Redbull"
  location          String
  countryCode       String
  url               String
  debutAt           DateTime
  defunctAt         DateTime?
  predecessorTeamId Int?         @unique
  predecessorTeam   Team?        @relation("Team_PredecessorTeam", fields: [predecessorTeamId], references: [id])
  successorTeam     Team?        @relation("Team_PredecessorTeam")
  seasonTeams       SeasonTeam[] @relation(name: "SeasonTeam_Team")
}

model Vehicle {
  id                     Int                     @id @default(autoincrement())
  slug                   String                  @unique
  name                   String
  powerUnit              String
  note                   String? // If the model has for example a specific livery
  seasonTeam             SeasonTeam?             @relation(name: "SeasonTeam_Vehicle")
  eventSessionTeamDriver EventSessionTeamDriver? @relation(name: "EventSessionTeamDriver_Vehicle")
}

model SeasonTeam {
  id                        Int                       @id @default(autoincrement())
  name                      String // Full name of the team this season, like "Mercedes-AMG Petronas F1 Team", "Scuderia Ferrari", ...
  powerUnit                 String
  chassis                   String
  isDefunct                 Boolean                   @default(false)
  seasonId                  Int
  season                    Season                    @relation(name: "SeasonTeam_Season", fields: [seasonId], references: [id])
  teamId                    Int
  team                      Team                      @relation(name: "SeasonTeam_Team", fields: [teamId], references: [id])
  vehicleId                 Int?                      @unique
  vehicle                   Vehicle?                  @relation(name: "SeasonTeam_Vehicle", fields: [vehicleId], references: [id])
  seasonTeamDrivers         SeasonTeamDriver[]        @relation(name: "SeasonTeamDriver_SeasonTeam")
  seasonTeamStandingEntries SeasonTeamStandingEntry[] @relation(name: "SeasonTeamStandingEntry_SeasonTeam")

  @@unique([seasonId, teamId])
}

model SeasonTeamDriver {
  id                              Int                             @id @default(autoincrement())
  number                          Int
  code                            String
  isTemporary                     Boolean                         @default(false)
  seasonTeamId                    Int
  seasonTeam                      SeasonTeam                      @relation(name: "SeasonTeamDriver_SeasonTeam", fields: [seasonTeamId], references: [id])
  driverId                        Int
  driver                          Driver                          @relation(name: "SeasonTeamDriver_Driver", fields: [driverId], references: [id])
  seasonTeamDriverStandingEntries SeasonTeamDriverStandingEntry[] @relation(name: "SeasonTeamDriverStandingEntry_SeasonTeamDriver")
  eventSessionTeamDrivers         EventSessionTeamDriver[]        @relation(name: "EventSessionTeamDriver_SeasonTeamDriver")

  @@unique([seasonTeamId, driverId])
}

model SeasonTeamStandingEntry {
  id             Int           @id @default(autoincrement())
  points         Float
  dateAt         DateTime
  note           String?
  seasonTeamId   Int
  seasonTeam     SeasonTeam    @relation(name: "SeasonTeamStandingEntry_SeasonTeam", fields: [seasonTeamId], references: [id])
  eventSessionId Int?
  eventSession   EventSession? @relation(name: "SeasonTeamStandingEntry_EventSession", fields: [eventSessionId], references: [id])
}

model SeasonTeamDriverStandingEntry {
  id                 Int              @id @default(autoincrement())
  points             Float
  dateAt             DateTime
  note               String?
  seasonTeamDriverId Int
  seasonTeamDriver   SeasonTeamDriver @relation(name: "SeasonTeamDriverStandingEntry_SeasonTeamDriver", fields: [seasonTeamDriverId], references: [id])
  eventSessionId     Int?
  eventSession       EventSession?    @relation(name: "SeasonTeamDriverStandingEntry_EventSession", fields: [eventSessionId], references: [id])
}

model Event {
  id            Int            @id @default(autoincrement())
  slug          String         @unique
  name          String
  round         Int // Which round in the season?
  laps          Int
  lapDistance   Float // in km
  raceAt        DateTime
  url           String
  circuitLayout String? // Should probably be something like "2001-2015", "2018-present", ...
  seasonId      Int
  season        Season         @relation(name: "Event_Season", fields: [seasonId], references: [id])
  circuitId     Int
  circuit       Circuit        @relation(name: "Event_Circuit", fields: [circuitId], references: [id])
  eventSessions EventSession[] @relation(name: "EventSession_Event")
}

model EventSession {
  id                              Int                             @id @default(autoincrement())
  name                            String
  type                            String // practice_1, practice_2, qualifying_1, qualifying_2, sprint, race, feature_race, ...
  tyreChoices                     Json?
  startAt                         DateTime
  endAt                           DateTime?
  eventId                         Int
  event                           Event                           @relation(name: "EventSession_Event", fields: [eventId], references: [id])
  eventSessionTeamDrivers         EventSessionTeamDriver[]        @relation(name: "EventSessionTeamDriver_EventSession")
  seasonTeamStandingEntries       SeasonTeamStandingEntry[]       @relation(name: "SeasonTeamStandingEntry_EventSession")
  seasonTeamDriverStandingEntries SeasonTeamDriverStandingEntry[] @relation(name: "SeasonTeamDriverStandingEntry_EventSession")

  @@unique([eventId, type])
}

model EventSessionTeamDriver {
  id                                    Int                                    @id @default(autoincrement())
  number                                Int
  code                                  String
  eventSessionId                        Int
  eventSession                          EventSession                           @relation(name: "EventSessionTeamDriver_EventSession", fields: [eventSessionId], references: [id])
  seasonTeamDriverId                    Int
  seasonTeamDriver                      SeasonTeamDriver                       @relation(name: "EventSessionTeamDriver_SeasonTeamDriver", fields: [seasonTeamDriverId], references: [id])
  vehicleId                             Int?                                   @unique
  vehicle                               Vehicle?                               @relation(name: "EventSessionTeamDriver_Vehicle", fields: [vehicleId], references: [id])
  eventSessionTeamDriverLaps            EventSessionTeamDriverLap[]            @relation(name: "EventSessionTeamDriverLap_EventSessionTeamDriver")
  eventSessionTeamDriverPitStops        EventSessionTeamDriverPitStop[]        @relation(name: "EventSessionTeamDriverPitStop_EventSessionTeamDriver")
  eventSessionTeamDriverStartingGrids   EventSessionTeamDriverStartingGrid[]   @relation(name: "EventSessionTeamDriverStartingGrid_EventSessionTeamDriver")
  eventSessionTeamDriverClassifications EventSessionTeamDriverClassification[] @relation(name: "EventSessionTeamDriverClassification_EventSessionTeamDriver")
}

model EventSessionTeamDriverLap {
  id                       Int                    @id @default(autoincrement())
  lap                      Int
  isDeleted                Boolean                @default(false)
  time                     DateTime?
  position                 Int?
  eventSessionTeamDriverId Int
  eventSessionTeamDriver   EventSessionTeamDriver @relation(name: "EventSessionTeamDriverLap_EventSessionTeamDriver", fields: [eventSessionTeamDriverId], references: [id])
}

model EventSessionTeamDriverPitStop {
  id                       Int                    @id @default(autoincrement())
  lap                      Int
  timeMilliseconds         Int? // How long was the pitstop?
  eventSessionTeamDriverId Int
  eventSessionTeamDriver   EventSessionTeamDriver @relation(name: "EventSessionTeamDriverPitStop_EventSessionTeamDriver", fields: [eventSessionTeamDriverId], references: [id])
}

model EventSessionTeamDriverStartingGrid {
  id                       Int                    @id @default(autoincrement())
  position                 Int?
  time                     DateTime? // What was the time to reach the position?
  note                     String? // if the racer for example starts in the pit or has a penalty
  eventSessionTeamDriverId Int
  eventSessionTeamDriver   EventSessionTeamDriver @relation(name: "EventSessionTeamDriverStartingGrid_EventSessionTeamDriver", fields: [eventSessionTeamDriverId], references: [id])
}

model EventSessionTeamDriverClassification {
  id                       Int                    @id @default(autoincrement())
  status                   String // finished, dnf, dns, ...
  position                 Int?
  time                     DateTime?
  points                   Float? // Yes, as we've seen last season, there can be half points
  note                     String?
  eventSessionTeamDriverId Int
  eventSessionTeamDriver   EventSessionTeamDriver @relation(name: "EventSessionTeamDriverClassification_EventSessionTeamDriver", fields: [eventSessionTeamDriverId], references: [id])
}
