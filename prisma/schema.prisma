generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Series {
  id      String   @id @default(uuid())
  slug    String   @unique // formula-1, formula-2, formula-3, formula-e
  name    String
  url     String
  seasons Season[] @relation(name: "Season_Series")
}

model Season {
  id          String       @id @default(uuid())
  slug        String       @unique
  name        String // ex.: Formula 1 2022 World Championship
  year        Int
  startAt     DateTime
  endAt       DateTime?
  seriesId    String
  series      Series       @relation(name: "Season_Series", fields: [seriesId], references: [id])
  seasonTeams SeasonTeam[] @relation(name: "SeasonTeam_Season")
  events      Event[]      @relation(name: "Event_Season")
}

model Circuit {
  id                String  @id @default(uuid())
  slug              String  @unique
  name              String
  location          String
  locationLatitude  Float?
  locationLongitude Float?
  countryCode       String
  url               String
  events            Event[] @relation(name: "Event_Circuit")
}

model Driver {
  id            String         @id @default(uuid())
  slug          String         @unique
  firstName     String
  lastName      String
  countryCode   String
  url           String
  seasonDrivers SeasonDriver[] @relation(name: "SeasonDriver_Driver")
}

model Team {
  id                String       @id @default(uuid())
  slug              String       @unique
  name              String
  location          String
  countryCode       String
  url               String
  debutAt           DateTime
  defunctAt         DateTime?
  predecessorTeamId String?      @unique
  predecessorTeam   Team?        @relation("Team_PredecessorTeam", fields: [predecessorTeamId], references: [id])
  successorTeam     Team?        @relation("Team_PredecessorTeam")
  seasonTeams       SeasonTeam[] @relation(name: "SeasonTeam_Team")
}

model SeasonTeam {
  id                        String                    @id @default(uuid())
  name                      String // Full name of the team this season, like "Mercedes-AMG Petronas F1 Team", "Scuderia Ferrari", ...
  shortName                 String // "Mercedes", "Ferrari", "McLaren Mercedes", "Williams Mercedes", ...
  powerUnit                 String
  chassis                   String
  isDefunct                 Boolean                   @default(false)
  seasonId                  String
  season                    Season                    @relation(name: "SeasonTeam_Season", fields: [seasonId], references: [id])
  teamId                    String
  team                      Team                      @relation(name: "SeasonTeam_Team", fields: [teamId], references: [id])
  seasonDrivers             SeasonDriver[]            @relation(name: "SeasonDriver_SeasonTeam")
  seasonTeamStandingEntries SeasonTeamStandingEntry[] @relation(name: "SeasonTeamStandingEntry_SeasonTeam")

  @@unique([seasonId, teamId])
}

model SeasonDriver {
  id                          String                      @id @default(uuid())
  number                      Int
  code                        String
  isTemporary                 Boolean                     @default(false)
  seasonTeamId                String
  seasonTeam                  SeasonTeam                  @relation(name: "SeasonDriver_SeasonTeam", fields: [seasonTeamId], references: [id])
  driverId                    String
  driver                      Driver                      @relation(name: "SeasonDriver_Driver", fields: [driverId], references: [id])
  seasonDriverStandingEntries SeasonDriverStandingEntry[] @relation(name: "SeasonDriverStandingEntry_SeasonDriver")
  eventSessionDrivers         EventSessionDriver[]        @relation(name: "EventSessionDriver_SeasonDriver")

  @@unique([seasonTeamId, driverId])
}

model SeasonTeamStandingEntry {
  id             String        @id @default(uuid())
  points         Float
  dateAt         DateTime
  note           String?
  seasonTeamId   String
  seasonTeam     SeasonTeam    @relation(name: "SeasonTeamStandingEntry_SeasonTeam", fields: [seasonTeamId], references: [id])
  eventSessionId String?
  eventSession   EventSession? @relation(name: "SeasonTeamStandingEntry_EventSession", fields: [eventSessionId], references: [id])
}

model SeasonDriverStandingEntry {
  id             String        @id @default(uuid())
  points         Float
  dateAt         DateTime
  note           String?
  seasonDriverId String
  seasonDriver   SeasonDriver  @relation(name: "SeasonDriverStandingEntry_SeasonDriver", fields: [seasonDriverId], references: [id])
  eventSessionId String?
  eventSession   EventSession? @relation(name: "SeasonDriverStandingEntry_EventSession", fields: [eventSessionId], references: [id])
}

model Event {
  id            String         @id @default(uuid())
  slug          String         @unique
  name          String
  round         Int // Which round in the season?
  laps          Int
  lapDistance   Float // in km
  raceAt        DateTime
  url           String
  circuitLayout String? // Should probably be something like "2001-2015", "2018-present", ...
  seasonId      String
  season        Season         @relation(name: "Event_Season", fields: [seasonId], references: [id])
  circuitId     String
  circuit       Circuit        @relation(name: "Event_Circuit", fields: [circuitId], references: [id])
  eventSessions EventSession[] @relation(name: "EventSession_Event")
}

model EventSession {
  id                          String                      @id @default(uuid())
  slug                        String                      @unique
  name                        String
  type                        String // practice-1, practice-2, qualifying-1, qualifying-2, sprint, race, feature-race, ...
  tyreChoices                 Json?
  startAt                     DateTime
  endAt                       DateTime?
  eventId                     String
  event                       Event                       @relation(name: "EventSession_Event", fields: [eventId], references: [id])
  eventSessionDrivers         EventSessionDriver[]        @relation(name: "EventSessionDriver_EventSession")
  seasonTeamStandingEntries   SeasonTeamStandingEntry[]   @relation(name: "SeasonTeamStandingEntry_EventSession")
  seasonDriverStandingEntries SeasonDriverStandingEntry[] @relation(name: "SeasonDriverStandingEntry_EventSession")

  @@unique([eventId, type])
}

model EventSessionDriver {
  id                                String                             @id @default(uuid())
  number                            Int? // Sometimes a driver changes their number for a session, so we can ovewrite it here
  eventSessionId                    String
  eventSession                      EventSession                       @relation(name: "EventSessionDriver_EventSession", fields: [eventSessionId], references: [id])
  seasonDriverId                    String
  seasonDriver                      SeasonDriver                       @relation(name: "EventSessionDriver_SeasonDriver", fields: [seasonDriverId], references: [id])
  eventSessionDriverLaps            EventSessionDriverLap[]            @relation(name: "EventSessionDriverLap_eventSessionDriver")
  eventSessionDriverPitStops        EventSessionDriverPitStop[]        @relation(name: "EventSessionDriverPitStop_eventSessionDriver")
  eventSessionDriverStartingGrids   EventSessionDriverStartingGrid[]   @relation(name: "EventSessionDriverStartingGrid_eventSessionDriver")
  eventSessionDriverClassifications EventSessionDriverClassification[] @relation(name: "EventSessionDriverClassification_eventSessionDriver")
}

model EventSessionDriverLap {
  id                   String             @id @default(uuid())
  lap                  Int
  isDeleted            Boolean            @default(false)
  time                 DateTime?
  position             Int?
  eventSessionDriverId String
  eventSessionDriver   EventSessionDriver @relation(name: "EventSessionDriverLap_eventSessionDriver", fields: [eventSessionDriverId], references: [id])
}

model EventSessionDriverPitStop {
  id                   String             @id @default(uuid())
  lap                  Int
  timeMilliseconds     Int? // How long was the pitstop?
  eventSessionDriverId String
  eventSessionDriver   EventSessionDriver @relation(name: "EventSessionDriverPitStop_eventSessionDriver", fields: [eventSessionDriverId], references: [id])
}

model EventSessionDriverStartingGrid {
  id                   String             @id @default(uuid())
  position             Int?
  time                 DateTime? // What was the time to reach the position in the qualification?
  note                 String? // if the racer for example starts in the pit or has a penalty
  eventSessionDriverId String
  eventSessionDriver   EventSessionDriver @relation(name: "EventSessionDriverStartingGrid_eventSessionDriver", fields: [eventSessionDriverId], references: [id])
}

model EventSessionDriverClassification {
  id                   String             @id @default(uuid())
  status               String // finished, dnf, dns, ...
  position             Int?
  time                 DateTime?
  points               Float? // Yes, as we've seen last season, there can be half points
  note                 String?
  eventSessionDriverId String
  eventSessionDriver   EventSessionDriver @relation(name: "EventSessionDriverClassification_eventSessionDriver", fields: [eventSessionDriverId], references: [id])
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  password  String
  email     String   @unique
  roles     Json     @default("[]")
  isLocked  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
